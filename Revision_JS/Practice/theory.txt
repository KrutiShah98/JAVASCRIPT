OOPS : oBJECT oRIENTED pROGRAMMING sYSTEM


1> CLASS
2> oBJECT
3> INHERITANCE
4> POLYMORPHISM

=>CLASS : CLASS IS A USERDEFINED DATA TYPE
            CLASS IS A COLLECTION OF DATA MEMEBER AND MEMBER FUNCTION:

            E.G. PYTHON _WHATSAPP_GROUP  (CLASS)


            --> KRUTI    (DATA MEMBER)
            -->SANDHYA
            -->BHARGAVI


            ->MESSAGE  (MEMBER FUNCTION/METHOD)
            - REMOVE
            --ADD
            --CREATEGROUP


            --ADMIN     (oBJECT)


OBJECT---OBJECT IS AN INSTANCE OR VARIABLE OF CLASS
            USING OF OBJECT WE CAN ACCESS PROPERTIES OF CLASS


 -->CONSTRUCTOR:CONSTRUCTOR IS SPECIAL MEMEBER FUNCTION

 WHICH IS INVOKE AUTOMATICALLY WHENEVER WE CREATE OBJECT OF CLASS.


 CONSTRUCTOR NAME AND CLASS NAME BOTH ARE statements

 1)USING OF CONSTRUCTOR KEYWORD

E.G. CLASS STUDENT
{
    CONSTRUCTOR(){

    }
}           


---->>>>TYPES OF CONSTRUCTOR:


2 TYPES

1) DEFAULT CONSTRUCTOR:

CLASS STUDENT
{
    CONSTRUCTOR(){

    }
}

2)PARAMETERIZED CONSTRUCTOR:

CLASS STUDENT
{
    CONSTRUCTOR(PARAMETERS)
    {
        
    }
}


----------------------------------------------------------------
VISIBILITY MODES OR ACCESS SPECIFIER:

THREE TYPES:

1)PRIVATE=WHICH IS ONLY ACCESSBY OWN CLASS
2) PUBLIC=WHICH IS ACCESS BY OWN AND OTHER CLASS
3)PROTECTED= WHICH IS ACCESS BY OWN CLASS AND CHILD CLASS


VARIABLE ACCESS SPECIFIER:

TWO WAYS TO DEFINE VARIABLE(MEMEBER) IN CLASS

1)PARTIAL PRIVATE: WHICH IS REPRESENT BY_VARNAME IN PREFIX(TRADITION)
2)TRULY PRIVATE:  WHICH IS REPRESENT BY #VARNAME (DECLARE IN ES6)


-----------------------------------------------------------------------

INHERITANCE: ONE CLASS DERIVED PROPERTIESOF ANOTHER CLASS ITS CALLED INHERITANCE

USING OF INHERITANCE WE CAN REDUCE OUR CODE

INHERITANCE PROVIDE REUSABLITY.
USING OF INHERITANCE WE CAN SAVE OUR TIME.

INHERITANCE ONLY POSSIBLE WITH EXTENDS KEYWORDS.

1) PARENT CLASS / BASE CLASS /SUPER CLASS

                |
                V

2) CHILD CLASS / DERIVED CLASS / SUB CLASS

HERE,CHILD CLASS CAN ACCESS PROPERTIES OF PARENT CLASS

ALWAYS CREATE OBJECT OF CHILD(DERIVED) CLASS.

-----> CONSTRUCTOR OVERIDING: WHENN PARENT AND CHILD BOTH HAVE SAME CONSTRUCTOR IT WILL OVERRRIDE CONSTRUCTOR

this(): refer current Class PROPERTIES

super(): USING OF SUPER KEYWORDWE CAN ACCESSSPECIFIC PARENT"S PROPERTIES.


======================================================================================

=>TYPES OF INHERITANCE:


1) CLASSICAL INHERITANCE

CLASS ACCESS{

}
CLASS B EXTENDS ACCESS
{

}

2) PROTYPICAL INHERITANCE

CREATE OBJECT OF ANOTHER CLASS AND EXTENDS PROPERTIES

----------------------------------------------------------------

ENCAPSULATION: MOSLT IMP CONCEPT OF OOPS

IT SIMILAR LIKE CAPSULE
WRAP DATA MEMEBER AND MEMEBER FUNCTION

-> DATA HIDDEN
-> GETTER AND SETTER


================================================================

POLYMORPHISM: POLY MEANS MANY AND MORPHISM MEANS FORMS

POLYMORPHISM IS DERIVEDFROM GREEK WORD

WHICH MEANS ONE NAMED METHOD HAS DIFFERENT FORMS
E.G  addEventlistener

woman-> wife
        mother
        CHILD

        there are 2 TYPE of POLYMORPHISM

        1)METHOD OVERLOADING:
            ONE CLASS HAS SAME NAME METHOD WITH DIFFERENT ARGUMENTS

            E.G   class Student 
            {
                display(){

                }
                display(int id){

                }
            }
            note:javascript does not support METHOD  OVERLOADING CONCEPT

        2)METHOD OVERIDING:
         when parent and child BOTH have same name method its CALLED method OVERIDING

==============================================================================================

ABSTRACTION CONCEPT:ABSTRACTION WHICH IS REPRESENT ONLY FEW INFORMATION NOT ALLOCTED BACKGROUND  INFORMATION

ABSTRACTION WHICH IS CONTAIN ONLY METHOD DECLARATION
WITHOUT BODY

CHILD CAN IMPLEMENT THAT ABSTRACT method.



         
